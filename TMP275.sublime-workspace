{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Systronix",
				"Systronix_TMP102"
			],
			[
				"time",
				"timeServer"
			],
			[
				"INPUT",
				"INPUT_PULLUP"
			],
			[
				"VOUT",
				"VOUT_COMMAND"
			],
			[
				"menu",
				"menu_timeout"
			],
			[
				"task",
				"task_time_reset"
			],
			[
				"menu_acc",
				"menu_access_run_action"
			],
			[
				"times",
				"times_here"
			],
			[
				"lcd",
				"lcd_text_ptr_a"
			],
			[
				"drawer",
				"drawer_ok"
			],
			[
				"return",
				"return_this"
			],
			[
				"id",
				"id_digit"
			],
			[
				"habitat",
				"habitat_a_menu_ptr"
			],
			[
				"extend",
				"extend_msec"
			],
			[
				"action",
				"action_msg_16chars"
			],
			[
				"tod",
				"TODO"
			],
			[
				"update",
				"update_lcd_a"
			],
			[
				"def",
				"deflt"
			],
			[
				"ha",
				"habitat_b_menu_changed"
			],
			[
				"heat",
				"heat_lamps_all_on"
			],
			[
				"heat_lamps_all",
				"heat_lamps_all_on"
			],
			[
				"menu_service",
				"menu_service_autocycle_action"
			],
			[
				"mnu",
				"menu_timers"
			],
			[
				"lcd_text",
				"lcd_text_ptr_b"
			],
			[
				"menu_test",
				"menu_test_fluorescent_action"
			],
			[
				"min",
				"min_task_time"
			],
			[
				"b2",
				"B2BWEC"
			],
			[
				"act",
				"act_ptr"
			],
			[
				"men",
				"menu_update_tick"
			],
			[
				"stat",
				"state_msg_Str1"
			],
			[
				"habita",
				"habitat_a_menu_ptr"
			],
			[
				"input",
				"inputString1"
			],
			[
				"menu_act",
				"menu_action1"
			],
			[
				"init",
				"menu_init"
			],
			[
				"SALT",
				"SALT_serial_event"
			],
			[
				"bu",
				"bufferString1Ready"
			]
		]
	},
	"buffers":
	[
		{
			"file": "Systronix_TMP275.h",
			"settings":
			{
				"buffer_size": 8826,
				"encoding": "Western (Windows 1252)",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "/*\n * Systronix_TMP275.cpp\n *\n *  Created on: Nov 15, 2013\n *\t  Author: BAB\n */\n\n#include <Systronix_TMP275.h>\t\n\n//---------------------------< S E T U P >--------------------------------------------------------------------\n/*!\n\t@brief  Instantiates a new TMP275 class to use the given base address\n\t@todo\tTest base address for legal range 0x48-0x4B\n\t\t\tAdd constructor(void) for default address of 0x48\n*/\n\nvoid Systronix_TMP275::setup(uint8_t base)\n\t{\n\t_base = base;\n\tBaseAddr = base;\n\n//\tstruct data _data;\t\t\t// instance of the data struct - not used\n//\t_data.address = _base;\t\t// struct - not used\n\t}\n\n\n//---------------------------< B E G I N >--------------------------------------------------------------------\n/*!\n\t@brief  Join the I2C bus as a master\n*/\n\nvoid Systronix_TMP275::begin(void)\n\t{\n\tWire.begin();\t// join I2C as master\n\t}\n\n\n//---------------------------< I N I T >----------------------------------------------------------------------\n//\n// Attempts to write the pointer register.  If successful, sets control.exists true, else false.\n//\n\nuint8_t Systronix_TMP275::init (uint8_t config)\n\t{\n\tuint8_t written;\n\t\n\tWire.beginTransmission (_base);\t\t\t\t\t\t// base address\n\twritten = Wire.write (TMP275_CONF_REG_PTR);\t\t\t// pointer in 2 lsb\n\twritten += Wire.write ((uint8_t)config);\t\t\t// write MSB of configuration\n\n\tif (2 != written)\n\t\t{\n\t\tcontrol.exists = false;\t\t\t\t\t\t\t// unsuccessful i2c_t3 library call\n\t\treturn FAIL;\n\t\t}\n\t\n  \tif (Wire.endTransmission())\n\t\t{\n\t\tcontrol.exists = false;\t\t\t\t\t\t\t// unsuccessful i2c transaction\n\t\treturn FAIL;\n\t\t}\n\t\n\tcontrol.exists = true;\t\t\t\t\t\t\t\t// if here, we appear to have communicated with\n\treturn SUCCESS;\t\t\t\t\t\t\t\t\t\t// the device\n\t}\n\n\n//---------------------------< T A L L Y _ E R R O R S >------------------------------------------------------\n//\n// Here we tally errors.  This does not answer the 'what to do in the event of these errors' question; it just\n// counts them.  If the device does not ack the address portion of a transaction or if we get a timeout error,\n// exists is set to false.  We assume here that the timeout error is really an indication that the automatic\n// reset feature of the i2c_t3 library failed to reset the device in which case, the device no longer 'exists'\n// for whatever reason.\n//\n\nvoid Systronix_TMP275::tally_errors (uint8_t error)\n\t{\n\tswitch (error)\n\t\t{\n\t\tcase 0:\t\t\t\t\t// Wire.write failed to write all of the data to tx_buffer\n\t\t\tcontrol.incomplete_write_count ++;\n\t\t\tbreak;\n\t\tcase 1:\t\t\t\t\t// data too long from endTransmission() (rx/tx buffers are 259 bytes - slave addr + 2 cmd bytes + 256 data)\n\t\tcase 8:\t\t\t\t\t// buffer overflow from call to status() (read - transaction never started)\n\t\t\tcontrol.data_len_error_count ++;\n\t\t\tbreak;\n\t\tcase 2:\t\t\t\t\t// slave did not ack address (write)\n\t\tcase 5:\t\t\t\t\t// from call to status() (read)\n\t\t\tcontrol.rcv_addr_nack_count ++;\n\t\t\tcontrol.exists = false;\n\t\t\tbreak;\n\t\tcase 3:\t\t\t\t\t// slave did not ack data (write)\n\t\tcase 6:\t\t\t\t\t// from call to status() (read)\n\t\t\tcontrol.rcv_data_nack_count ++;\n\t\t\tbreak;\n\t\tcase 4:\t\t\t\t\t// arbitration lost (write) or timeout (read/write) or auto-reset failed\n\t\tcase 7:\t\t\t\t\t// arbitration lost from call to status() (read)\n\t\t\tcontrol.other_error_count ++;\n\t\t\tcontrol.exists=false;\n\t\t}\n\t}\n\n\n//---------------------------< R A W 1 3 T O C >--------------------------------------------------------------\n/*!\n\t@brief  Convert raw 13-bit temperature to float deg C\n\t\t\thandles neg and positive values specific to TMP275 extended mode \n\t\t\t13-bit temperature data\n\n\t@TODO instead pass a pointer to the float variable? and return error if value out of bounds\n*/\n//\n// receives uint16_t raw13 argument that should be an int16_t.  But, because readRegister() is a general\n// purpose function for reading all of the 16 bite registers we get around that by casting the uint16_t to\n// int16_t before we use the value.\n//\n// TODO: take some time to consider if it is worthwhile to have a separate function that just fetches the\n// temperature register.  Obvious downside (if it is a downside) is that such a function would necessarily need\n// to set the pointer register every time the temperature is read.\n//\n\nfloat Systronix_TMP275::raw13ToC (uint16_t raw13)\n\t{\n\tuint8_t\t\tshift = (raw13 & 1) ? 3 : 4;\t\t// if extended mode shift 3, else shift 4\n\treturn 0.0625 * ((int16_t)raw13 >> shift);\n\t}\n\n\n//---------------------------< R A W 1 3 _ T O _ F >----------------------------------------------------------\n//\n// Convert raw 13-bit TMP275 temperature to degrees Fahrenheit.\n//\n\nfloat Systronix_TMP275::raw13_to_F (uint16_t raw13)\n\t{\n\treturn (raw13ToC (raw13) * 1.8) + 32.0;\n\t}\n\n\n//---------------------------< G E T _ T E M P E R A T U R E _ D A T A >--------------------------------------\n//\n// Gets current temperature and fills the data struct with the various temperature info\n//\n\nuint8_t Systronix_TMP275::get_temperature_data (void)\n\t{\n\t\n\tif (_pointer_reg)\t\t\t\t\t\t\t\t\t// if not pointed at temperature register\n\t\tif (writePointer (TMP275_TEMP_REG_PTR))\t\t\t// attempt to point it\n\t\t\treturn FAIL;\t\t\t\t\t\t\t\t// attempt failed; quit\n\t\n\tif (readRegister (&data.raw_temp))\t\t\t\t\t// attempt to read the temperature\n\t\treturn FAIL;\t\t\t\t\t\t\t\t\t// attempt failed; quit\n\t\n\tdata.t_high = max((int16_t)data.raw_temp, (int16_t)data.t_high);\t// keep track of min/max temperatures\n\tdata.t_low = min((int16_t)data.t_low, (int16_t)data.raw_temp);\n\n\tdata.deg_c = raw13ToC (data.raw_temp);\t\t\t\t\t// convert to human-readable forms\n\tdata.deg_f = raw13_to_F (data.raw_temp);\n\t\n\treturn SUCCESS;\n\t}\n\n\n//---------------------------< W R I T E P O I N T E R >------------------------------------------------------\n/**\nWrite to a TMP275 register\nStart with slave address, as in any I2C transaction.\nNext byte must be the Pointer Register value, in 2 lsbs\nIf all you want to do is set the Pointer Register for subsequent read(s)\nthen this 2-byte write cycle is complete.\n\nData bytes in the write are optional but must always follow the Pointer Register write byte.\nThe last value written to the Pointer Register persists until changed.\n\n**/\n\nuint8_t Systronix_TMP275::writePointer (uint8_t pointer)\n\t{\n\tif (!control.exists)\t\t\t\t\t\t\t\t// exit immediately if device does not exist\n\t\treturn ABSENT;\n\n\t_pointer_reg = pointer;\t\t\t\t\t\t\t\t// keep a copy for use by other functions\n\tWire.beginTransmission (_base);\t\t\t\t\t\t// base address\n\tcontrol.ret_val = Wire.write (_pointer_reg);\t\t// pointer in 2 lsb\n\tif (1 != control.ret_val)\n\t\t{\n\t\tcontrol.ret_val = 0;\n\t\ttally_errors (control.ret_val);\t\t\t\t\t// increment the appropriate counter\n\t\treturn FAIL;\n\t\t}\n\n\tcontrol.ret_val = Wire.endTransmission();\n  \tif (SUCCESS == control.ret_val)\n\t\treturn SUCCESS;\n\ttally_errors (control.ret_val);\t\t\t\t\t\t// increment the appropriate counter\n\treturn FAIL;\t\t\t\t\t\t\t\t\t\t// calling function decides what to do with the error\n\t}\n\n\n//---------------------------< W R I T E R E G I S T E R >----------------------------------------------------\n/**\nParam pointer is the TMP275 register into which to write the data\ndata is the 16 bits to write.\nreturns 0 if no error, positive values for NAK errors\n**/\n\nuint8_t Systronix_TMP275::writeRegister (uint8_t pointer, uint16_t data)\n\t{\n\tuint8_t written;\t\t\t\t\t\t\t\t\t// number of bytes written\n\n\tif (!control.exists)\t\t\t\t\t\t\t\t// exit immediately if device does not exist\n\t\treturn ABSENT;\n\n\tWire.beginTransmission (_base);\t\t\t\t\t\t// base address\n\twritten = Wire.write (pointer);\t\t\t\t\t\t// pointer in 2 lsb\n\twritten += Wire.write ((uint8_t)(data >> 8));\t\t// write MSB of data\n\twritten += Wire.write ((uint8_t)(data & 0x00FF));\t// write LSB of data\n\n\tif (3 != written)\n\t\t{\n\t\tcontrol.ret_val = 0;\n\t\ttally_errors (control.ret_val);\t\t\t\t\t// increment the appropriate counter\n\t\treturn FAIL;\n\t\t}\n\t\n  \tif (SUCCESS == Wire.endTransmission())\n\t\treturn SUCCESS;\n\ttally_errors (control.ret_val);\t\t\t\t\t\t// increment the appropriate counter\n\treturn FAIL;\t\t\t\t\t\t\t\t\t\t// calling function decides what to do with the error\n\t}\n\n\n//---------------------------< R E A D R E G I S T E R >------------------------------------------------------\n/**\n  Read the 16-bit register addressed by the current pointer value, store the data at the location passed\n  \n  return 0 if no error, positive bytes read otherwise.\n*/\n\nuint8_t Systronix_TMP275::readRegister (uint16_t *data)\n\t{\n\tif (!control.exists)\t\t\t\t\t\t\t\t// exit immediately if device does not exist\n\t\treturn ABSENT;\n\n\tif (2 != Wire.requestFrom(_base, 2, I2C_STOP))\n\t\t{\n\t\tcontrol.ret_val = Wire.status();\t\t\t\t// to get error value\n\t\ttally_errors (control.ret_val);\t\t\t\t\t// increment the appropriate counter\n\t\treturn FAIL;\n\t\t}\n\n\t*data = (uint16_t)Wire.read() << 8;\n\t*data |= (uint16_t)Wire.read();\n\treturn SUCCESS;\n\t}\n\n\n//---------------------------< R E A D T E M P D E G C >------------------------------------------------------\n/**\nRead the most current temperature already converted and present in the TMP275 temperature registers\n\nIn continuous mode, this could be one sample interval old\nIn one shot mode this data is from the last-requested one shot conversion\n**/\nuint8_t Systronix_TMP275::readTempDegC (float *tempC) \n\t{\n\treturn FAIL;\n\t}\n\n\n\n//---------------------------< D E G C T O R A W 1 3 >--------------------------------------------------------\n/**\nConvert deg C float to a raw 13-bit temp value in TMP275 format.\nThis is needed for Th and Tl registers as thermostat setpoint values\n\nreturn 0 if OK, error codes if float is outside range of TMP275\n**/\n\nuint8_t Systronix_TMP275::degCToRaw13 (uint16_t *raw13, float *tempC)\n\t{\n\treturn FAIL;\n\t}\n\n\n//---------------------------< G E T O N E S H O T D E G C>---------------------------------------------------\n/**\nTrigger a one-shot temperature conversion, wait for the new value, about 26 msec, and update \nthe variable passed.\n\nIf the TMP275 is in continuous conversion mode, this places the part in One Shot mode, \ntriggers the conversion, waits for the result, updates the variable, and leaves the TMP275 in one shot mode.\n\nreturns 0 if no error\n**/\n\nuint8_t Systronix_TMP275::getOneShotDegC (float *tempC)\n\t{\n\treturn FAIL;\n\t}\n\n\n//---------------------------< S E T M O D E O N E S H O T >--------------------------------------------------\n/**\nSet the TMP275 mode to one-shot, with low power sleep in between\n\nmode: set to One Shot if true. \nIf false, sets to continuous sampling mode at whatever sample rate was last set.\n\nreturns: 0 if successful\n**/\n\nuint8_t Systronix_TMP275::setModeOneShot (boolean mode)\n\t{\n\treturn FAIL;\n\t}\n\n\n//---------------------------< S E T M O D E C O N T I N U O U S >--------------------------------------------\n/**\nSet TMP275 mode to continuous sampling at the rate given.\n\nrate: must be one of the manifest constants such as TMP275_CFG_RATE_1HZ\nif rate is not one of the four supported, it is set to the default 4 Hz\n\nreturns: 0 if successful\n**/\n\nuint8_t Systronix_TMP275::setModeContinuous (int8_t rate)\n\t{\n\treturn FAIL;\n\t}\n",
			"file": "Systronix_TMP275.cpp",
			"file_size": 11258,
			"file_write_time": 131330392274000775,
			"settings":
			{
				"buffer_size": 10833,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "Package Control: ",
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Add Repository"
			],
			[
				"upp",
				"Convert Case: Upper Case"
			],
			[
				"packa",
				"Package Control: Install Package"
			],
			[
				"",
				"Preferences: Settings - User"
			]
		],
		"width": 400.0
	},
	"console":
	{
		"height": 120.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/BAB/Documents/code/Arduino/libraries/Systronix_TMP275",
		"/C/Users/BAB/Documents/code/Arduino/libraries/Systronix_TMP275/examples"
	],
	"file_history":
	[
		"/C/Users/BAB/Documents/code/Arduino/libraries/Systronix_TMP102/examples/TMP102_LibraryTest/TMP102_LibraryTest.ino",
		"/C/Users/BAB/Documents/code/bash_scripts/pull.sh",
		"/C/Users/BAB/Documents/code/Arduino/SALT_CodeUpdates/b2bwec.ini",
		"/C/Users/BAB/Documents/code/Arduino/libraries/EmonLib/library.properties",
		"/C/Users/BAB/Documents/code/Arduino/libraries/Systronix_TMP275/CelciusToFahrenheit.ods",
		"/C/Users/BAB/Documents/code/Arduino/libraries/TeensyID/examples/ReadAll/ReadAll.ino",
		"/C/Users/BAB/Documents/code/Arduino/libraries/TeensyID/TeensyID.cpp",
		"/C/Users/BAB/Documents/code/Arduino/libraries/TeensyID/TeensyID.h",
		"/C/Users/BAB/Documents/code/Arduino/W5500_Test/README.md",
		"/C/Users/BAB/Documents/code/Arduino/W5500_Test/NtpTest/NtpTest.ino",
		"/C/Users/BAB/Documents/code/Arduino/W5500_Test/DhcpStressTest-T3/DhcpStressTest-T3.ino",
		"/C/Users/BAB/Documents/code/Arduino/WIZ820io_Test/ILI9341_WIZ820_Test/ILI9341_WIZ820_Test.ino",
		"/C/Users/BAB/Documents/code/Arduino/libraries/T3Mac/README.md",
		"/C/Users/BAB/Documents/code/Arduino/libraries/T3Mac/example/T3_readmac/T3_readmac.ino",
		"/C/Users/BAB/Documents/code/Arduino/libraries/T3Mac/T3Mac.h",
		"/C/Users/BAB/Documents/code/Arduino/libraries/T3Mac/T3Mac.cpp",
		"/C/Users/BAB/Documents/code/Arduino/libraries/TeensyID/README.md",
		"/C/Users/BAB/Documents/code/Arduino/libraries/TeensyMAC/TeensyMAC.cpp",
		"/C/Users/BAB/AppData/Local/Temp/wzf9c9/T3Mac/T3Mac.cpp",
		"/C/Users/BAB/AppData/Local/Temp/wz5aad/T3Mac/T3Mac.h",
		"/C/Users/BAB/AppData/Local/Temp/wzee64/T3Mac/T3Mac.cpp",
		"/C/Users/BAB/AppData/Local/Temp/wzed7a/T3Mac/T3Mac.h",
		"/L/logs/2016/Nov/log_2016-11-07.txt",
		"/L/logs/2000/Feb/log_2000-02-24.txt",
		"/L/logs/2017/Feb/log_2017-02-26.txt",
		"/L/logs/2017/Feb/log_2017-02-25.txt",
		"/C/Users/BAB/Documents/code/Arduino/W5500_Test/DhcpStressTest-M0Pro/DhcpStressTest-M0Pro.ino",
		"/C/Users/BAB/Documents/code/Arduino/W5500_Test/NtpTest-M0Pro/NtpTest-M0Pro.ino",
		"/C/Users/BAB/Documents/code/Arduino/W5500_Test/Hello_M0Pro/Hello_M0Pro.ino",
		"/C/Users/BAB/Documents/code/Arduino/libraries/SALT_utilities/SALT_utilities.h",
		"/C/Users/BAB/Documents/code/Arduino/libraries/Systronix_MB85RC256V/examples/SALT_diagnostics/SALT_diagnostics.ino",
		"/C/Users/BAB/Documents/code/Arduino/NAP-SALT2-TEST/SD_card/SdInfo/SdInfo.ino",
		"/C/Users/BAB/Documents/code/Arduino/NAP-SALT2-TEST/SD_card/MOSI_Test/MISO_Test.ino",
		"/C/Users/BAB/Documents/code/Arduino/libraries/NAP_pod_load_defs/SALT.h",
		"/C/Users/BAB/Documents/code/Arduino/libraries/Systronix_MB85RC256V/examples/ini_loader_SD/ini_loader_SD.ino",
		"/C/Users/BAB/Documents/code/Arduino/libraries/Systronix_MB85RC256V/examples/ini_loader/ini_loader.ino",
		"/C/Users/BAB/Documents/code/Arduino/libraries/Systronix_MB85RC256V/ini_files/sswec_20170219.ini",
		"/C/Users/BAB/Documents/code/Arduino/libraries/Systronix_MB85RC256V/examples/rcv_ini_file/SALT_INI_File_Issues.md",
		"/C/Users/BAB/Documents/code/Arduino/SALT_reptile/SALT_reptile.ino",
		"/C/Users/BAB/Documents/code/Arduino/libraries/Systronix_LCM300Q/examples/LCM300Q_MonitorDemo/LCM300Q_MonitorDemo.ino",
		"/C/Users/BAB/Documents/code/Arduino/libraries/Systronix_LCM300Q/Systronix_LCM300Q.cpp",
		"/C/Users/BAB/Documents/code/Arduino/libraries/Systronix_LCM300Q/Systronix_LCM300Q.h",
		"/C/Users/BAB/Documents/code/Arduino/libraries/SALT_menu/SALT_menu_act.cpp",
		"/C/Users/BAB/Documents/code/Arduino/libraries/SALT_UI/NAP_UI_key_defs.h",
		"/C/napserver/start.bat",
		"/C/napserver/apache24/logs/error.log",
		"/E/NAP/cpld_2016/cpld/CPLD.jed",
		"/E/NAP/cpld_2016/cpld/CPLD_20040106.jed",
		"/C/Users/BAB/Documents/code/Arduino/SALT_CodeUpdates/habitat_blank.ini",
		"/X/INCOMING/Temp/napserver_logs/20161111.error.log",
		"/X/INCOMING/Temp/napserver_logs/20161111a.error.log",
		"/X/INCOMING/Temp/napserver_logs/error.log",
		"/C/Users/BAB/Documents/code/Arduino/libraries/Ethernet2/examples/DhcpAddressPrinter/DhcpAddressPrinter.ino",
		"/C/Users/BAB/Documents/code/Arduino/libraries/Systronix_MB85RC256V/ini_files/habitat_blank.ini",
		"/C/Users/BAB/Documents/code/Arduino/libraries/SALT_menu/SALT_menu_act.h",
		"/C/Users/BAB/Documents/code/Arduino/libraries/SALT_menu/README.md",
		"/C/Users/BAB/Documents/code/Arduino/libraries/SALT_menu/SALT_menu_init.inl",
		"/C/Users/BAB/Documents/code/Arduino/libraries/SALT_menu/SALT_menu.cpp",
		"/C/Users/BAB/Documents/code/Arduino/libraries/SALT_menu/SALT_menu.h",
		"/E/BAB/Google Drive/NorthAmericanPet/SALT_Simple_ALternate_TINI/BackOffice/sqlite2_export/data_from_sqlite2.sql",
		"/C/napserver/napserver/dat_files/data.dat",
		"/C/napserver/napserver/dat_files/Floorplan.dat",
		"/E/BAB/Google Drive/NorthAmericanPet/BackOfficeFiles/FromPetcoFetch/iface.dat",
		"/E/BAB/Google Drive/NorthAmericanPet/BackOfficeFiles/FromPetcoFetch/Floorplan.dat",
		"/C/Users/BAB/Documents/code/napserver_fromstore/napserver/docs/HabitatSelector_Millenium.php",
		"/C/Users/BAB/Documents/code/napserver_fromstore/napserver/dat_files/Floorplan.dat",
		"/C/Users/BAB/Documents/code/napserver_fromstore/napserver/docs/data.dat",
		"/C/Users/BAB/Documents/code/napserver_fromstore/napserver/dat_files/iface.dat",
		"/C/Users/BAB/Documents/code/napserver_fromstore/napserver/dat_files/Log.dat",
		"/C/Users/BAB/Documents/code/napserver_fromstore/napserver/dat_files/data.dat",
		"/C/Users/BAB/Documents/code/Arduino/libraries/SALT_drawer_locks/README.md",
		"/C/Users/BAB/Documents/code/Arduino/libraries/Ethernet2/README.md",
		"/C/Users/BAB/Documents/code/Arduino/libraries/Systronix_MB85RC256V/ini_files/b2bwec.ini",
		"/C/Users/BAB/Documents/code/Arduino/libraries/SdFat/src/SdFat.h",
		"/C/Users/BAB/Documents/code/Arduino/libraries/SdFat/README.md",
		"/C/Users/BAB/Documents/code/Arduino/NAP-SALT2-TEST/README.md",
		"/C/Users/BAB/AppData/Local/Temp/build745c5bd38e0b05ecbd7c475088bd93f9.tmp/build.options.json",
		"/C/Users/BAB/Documents/code/Arduino/SALT_reptile/SALT_reptile.h",
		"/C/Users/BAB/Documents/code/Arduino/libraries/SALT_utilities/SALT_utilities.cpp",
		"/C/Users/BAB/Documents/code/Arduino/libraries/SALT_UI/SALT_serial_event.h",
		"/C/Users/BAB/Documents/code/Arduino/SALT_reptile/readme.md",
		"/C/Users/BAB/Documents/code/Arduino/libraries/Systronix_MB85RC256V/ini_files/sswec.ini",
		"/C/Users/BAB/Documents/code/Arduino/SALT_CodeUpdates/b2bwec.20160913.ini",
		"/C/Users/BAB/Documents/code/Arduino/LLC/DemoB-1v01/DemoB-1v01.ino",
		"/C/Users/BAB/Documents/code/Arduino/LLC/LLC-P1EP-Plus-1v04a/LLC-P1EP-Plus-1v04a.ino",
		"/C/Users/BAB/Documents/code/Arduino/SALT_CodeUpdates/b2bwec20160910.ini",
		"/C/Users/BAB/Documents/code/Arduino/libraries/Systronix_MB85RC256V/examples/ini_loader/ini_loader.h",
		"/C/Users/BAB/Documents/code/Arduino/SALT_reptile/SALT_heater_manager.h",
		"/C/Users/BAB/Documents/code/Arduino/SALT_reptile/SALT_heater_manager.cpp",
		"/C/Users/BAB/Documents/code/Arduino/libraries/SALT_heat_control/SALT_heat_control.cpp",
		"/C/Users/BAB/Documents/code/napserver_fromstore/README.md",
		"/C/Users/BAB/Documents/code/Arduino/libraries/SALT_UI/README.md",
		"/C/Users/BAB/Documents/code/Arduino/libraries/SALT_menu/examples/MenuTest/MenuTest.ino",
		"/E/BAB/Google Drive/NorthAmericanPet/SALT_Simple_ALternate_TINI/BackOffice/Reptile-Serial-Captures/serial_capture_menus_20160720.txt",
		"/C/Users/BAB/Documents/code/Arduino/libraries/SALT_UI/SALT_UI.cpp",
		"/C/Users/BAB/Documents/code/Arduino/libraries/SALT_UI/SALT_UI.h",
		"/C/Users/BAB/Documents/code/Arduino/libraries/SALT_settings/SALT_settings.h",
		"/C/Users/BAB/Documents/code/Arduino/libraries/Systronix_MB85RC256V/examples/rcv_ini_file/sswec.ini",
		"/C/Users/BAB/Documents/code/Arduino/SALT_CodeUpdates/b2bwec_20160804.ini",
		"/C/Users/BAB/Documents/code/Arduino/libraries/Systronix_MB85RC256V/readme.md",
		"/E/BAB/Google Drive/NorthAmericanPet/SALT_Simple_ALternate_TINI/BackOffice/Reptile-Serial-Captures/serial_capture_diag_20160720b.txt",
		"/C/Users/BAB/Documents/code/Arduino/libraries/SALT_UI/SALT_serial_event.code",
		"/C/Users/BAB/AppData/Roaming/Sublime Text 3/Packages/Default/Preferences.sublime-settings",
		"/E/projects/NAP_Jimmy/v2_3_firm/build.bat",
		"/E/projects/NAP_Jimmy/v2_3_firm/lib/IO.a51",
		"/E/projects/NAP_Jimmy/v2_3_firm/Firm.tini",
		"/E/projects/NAP_Jimmy/v2_3_firm/src/napv2_3/io/Side.java",
		"/E/projects/NAP_Jimmy/v2_3_firm/src/napv2_3/io/IO.java",
		"/C/Users/BAB/Documents/code/Arduino/SALT_CodeUpdates/b2bwec_20160808.ini",
		"/C/Users/BAB/AppData/Roaming/Sublime Text 3/Packages/User/C++.sublime-settings",
		"/C/Users/BAB/Documents/code/Arduino/libraries/SALT_settings/SALT_settings.cpp",
		"/C/Users/BAB/Documents/code/Arduino/libraries/Systronix_MB85RC256V/examples/fram_test/fram_test.ino",
		"/C/Users/BAB/Documents/code/Arduino/libraries/Systronix_MB85RC256V/examples/rcv_ini_file/'SALT_INI_File_Issues'",
		"/C/Users/BAB/Documents/code/Arduino/SALT_CodeUpdates/sswec.ini",
		"/C/Users/BAB/Documents/code/Arduino/SALT_CodeUpdates/b2bwec_NoComments_20160805.ini",
		"/C/Users/BAB/Documents/code/Arduino/SALT_CodeUpdates/b2bwec_ShorterComments_20160805.ini",
		"/C/Users/BAB/Documents/code/Arduino/Teensy_HelperApps/readme.md",
		"/C/Users/BAB/Documents/code/Arduino/libraries/Systronix_TMP102/README.md",
		"/C/Users/BAB/Documents/code/Arduino/Teensy_PC_Tools/readme.md",
		"/C/Users/BAB/Documents/code/Arduino/SALT_CodeUpdates/readme.md",
		"/C/Users/BAB/Documents/code/Arduino/SALT_Tools/readme.md",
		"/C/Users/BAB/Documents/code/Arduino/SALT_tools/readme.md",
		"/C/Users/BAB/AppData/Local/Temp/build87e93bcedc5abcaee1f2a933be31f475.tmp/sketch/rcv_ini_file.ino.cpp.o",
		"/C/Users/BAB/Documents/code/Arduino/libraries/Systronix_MB85RC256V/examples/rcv_ini_file/rcv_ini_file.ino",
		"/C/Users/BAB/AppData/Roaming/Sublime Text 3/Local/Session.sublime_session",
		"/C/Users/BAB/AppData/Roaming/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/C/Users/BAB/AppData/Roaming/Sublime Text 3/Packages/User/Default (Windows).sublime-keymap",
		"/C/Users/BAB/AppData/Roaming/Sublime Text 3/Packages/Default/Default (Windows).sublime-keymap"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"heater",
			"102",
			");\n",
			"mac",
			"teensy_mac",
			"getTeensySerial",
			"mac",
			"* ",
			"CS_PIN",
			"mac",
			"CS_PIN",
			"LCM300Q",
			"TMP102",
			"push",
			"uSD",
			"uSD_DETECT",
			"timeout",
			"menu_menu",
			"timeout",
			"menu_menu",
			"menu_config",
			"config",
			"CONFIG",
			"!pause",
			"SS",
			"select",
			"SS",
			"ss",
			"SS",
			"SD_CHIP_SELECT",
			"KEYDEFAULT",
			"// go to pin# menu",
			"timeout",
			"chirp",
			"menu_timers",
			"utils.is_task_time ",
			"change_display_tick",
			"ffwd",
			"return_this",
			"G14",
			"};\t// default next menu\n};",
			"NULL ",
			"NULL",
			"rights",
			"pin is a 5",
			"rights",
			"associate",
			"deflt",
			"dflt",
			"deflt",
			"progress",
			"dawn",
			"menu_menu_pin",
			"menu_care_pin",
			"menu_access_run",
			"menu_access",
			"menu_run",
			"menu_care",
			"menu_care_action",
			"care_",
			"care",
			"core",
			"times_here",
			"menu_time_edit",
			"menu_time_show",
			"care",
			"dawn",
			"#",
			"menu_ptr->usb_text_ptr",
			"menu_dawn",
			"System",
			"Sytstem error",
			"menu_dusk",
			"schedule",
			"menu_clock",
			"menu_time",
			"menu_time_show",
			"menu_clock_show",
			"menu_clock",
			"menu_dawndusk",
			"menu_dawn",
			"menu_dawndusk",
			"menu_schedule",
			"dawn",
			"clock",
			"time_counter",
			"SALT_settings",
			"settings",
			"logged_in_user",
			"name",
			"keyval",
			"pin_entered",
			"id_entered",
			"id_digit",
			"setting",
			"pin",
			"printf",
			"menu_access_run",
			"case",
			"// eventually will go to pin# menu",
			"menu_access",
			"menu_run",
			"menu_restart_now",
			"not",
			"menu_factory_lamps_walking_1",
			"menu_factory_lamps_by_drawer",
			"htr_mgr",
			"times_here",
			"cycler_2",
			"menu_factory_lamps_by_drawer",
			"heat_lamp",
			"dwr_heat_lamp",
			"pad",
			"menu_factory_autocycle_start",
			"MENU_CYCLE",
			"by_drawer",
			"menu_factory_autocycle",
			"min_display_time",
			"interval",
			"menu_factory_interval",
			"test_interval",
			"utils.task_time_reset(",
			"change_display_tick",
			"menu_factory_autocycle",
			"act_ptr",
			"printf",
			"key_data",
			"(menu_obj* menu_ptr)"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"t_mac",
			"",
			"LCM300",
			"LCM300Q",
			"menu_network",
			"// pin # handled from this menu",
			"};\t// default next menu",
			"NULL, \t// default next menu\nNULL, \t// timeout menu\nTIMEOUT_MENU_LONG,\t// timeout value in msec\nALL_ACCESS\t\t\t// min access rights needed\n};",
			"menu_drawer_pin",
			"menu_menu_pin",
			"menu_drawer_pin",
			"menu_care_pin",
			"menu_zone_edit",
			"menu_zone_show",
			"menu_time_date_show",
			"menu_dusk",
			"menu_date",
			"menu_time_edit",
			"menu_time_show",
			"menu_dawn_dusk",
			"menu_dawn_edit",
			"menu_dawn",
			"menu_dawndusk",
			"pin_value",
			"pin_entered",
			"pin_digit",
			"menu_access_failed",
			"menu_access_success",
			"// go to pin# menu",
			"",
			"menu_access_run",
			"menu_access",
			"menu_notyet",
			"menu_factory_pads_walking_1",
			"menu_factory_lamps_walking_1",
			"menu_factory_pads_by_drawer",
			"heat_pad",
			"dwr_heat_pad",
			"by_drawer_run",
			"menu_factory_lamps_by_drawer",
			"test_interval",
			"menu_factory_interval_set",
			"menu_factory_interval",
			"(menu_obj* menu_ptr, uint8_t keyval)",
			"(menu_obj*, uint8_t)",
			"(menu_obj*, uint8_t",
			"_factory",
			"LIGHT_",
			"_light_",
			"_factory",
			"PAD_",
			"menu_test_pad_start",
			"menu_temp_clear;",
			"menu_temp_clear]",
			"menu_temp_clear.",
			"menu_temp_cleared.",
			"menu_temp_cleared",
			"no purpose",
			"menu_service_autocycle",
			"menu_service",
			"menu_test_lamp_on",
			"menu_test_lamp_start",
			"menu_clock_show",
			"menu_obj* menu_ptr",
			"menu_obj*",
			"menu_restart_now",
			"menu_timers",
			"menu_test_fluorescent",
			"menu_test_pad",
			"menu_test_lamp",
			"fluorescent_onoff",
			"fluorescent",
			"&menu_diagnostic_keycode",
			"menu_diagnostic_keycode.",
			"alarm",
			"K9 <DOWN/OFF>",
			"K4 <ENTER>",
			"menu_diagnostic",
			"menu_config",
			"menu_reboot",
			"menu_test",
			".down",
			"menu_temp_clear",
			"menu_temp_low",
			"menu_temp_high",
			"menu_temp_current",
			"menu_sensor",
			"menu_enviro",
			"menu_schedule",
			"no purpose at root clock menu",
			"time set",
			"menu_clock",
			"settings.sys_settings.",
			"settings.sys_settings,",
			"settings.sys_settings",
			"settings",
			"code",
			"Documents/code/Arduino",
			"code",
			"&menu_init",
			"&menu_por",
			"menu_por",
			"key1.text_ptr",
			"key1.raw",
			"key1.fresh",
			"menu_init",
			"key1_raw",
			"*key",
			"menu_obj",
			"",
			"SALT_UI",
			"",
			",",
			"",
			"[] =",
			"const char",
			"_inChar"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": false
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "Systronix_TMP275.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8826,
						"regions":
						{
						},
						"selection":
						[
							[
								8791,
								8791
							]
						],
						"settings":
						{
							"function_name_status_row": 227,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2384.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "Systronix_TMP275.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10833,
						"regions":
						{
						},
						"selection":
						[
							[
								1057,
								1057
							]
						],
						"settings":
						{
							"function_name_status_row": -1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 546.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 22.0
	},
	"input":
	{
		"height": 30.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"output.stino_log":
	{
		"height": 94.0
	},
	"output.unsaved_changes":
	{
		"height": 153.0
	},
	"pinned_build_system": "",
	"project": "TMP275.sublime-project",
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"C:\\Users\\BAB\\Documents\\code\\Sublime_projects\\Ethernet2.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 247.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
